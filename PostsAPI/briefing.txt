Project Briefing: Advanced REST API with Node.js and MongoDB

Objective
  Build a complex REST API with Node.js and MongoDB that includes 
  multiple resources (Users, Posts, Comments), performs CRUD operations, 
  handles data validation, and supports error handling. The API should allow 
  interactions between resources such as posts belonging to users and comments belonging to posts.

Key Features:

  1. Multiple Resources:

    Users: Represent users of the platform with basic info.

    Posts: Allow users to create posts, with each post belonging to a user.

    Comments: Allow users to comment on posts, with each comment belonging to a specific post.

  2. CRUD Operations:

    Users: Create, Read, Update, and Delete user data.

    Posts: Create, Read, Update, and Delete posts.

    Comments: Create, Read, Update, and Delete comments.

  3. Data Validation

    Use Joi for validating incoming data for all resources before performing any database operations (e.g., ensuring that the post has a title and content, the user has a valid name and email).

    Error Handling

    Centralized error handler to manage errors across all controllers.

    Catch and return appropriate HTTP status codes and error messages (404 for not found, 400 for validation errors, etc.).

  4. Relationships Between Resources:

    User ↔ Post: A user can have multiple posts.

    Post ↔ Comment: A post can have multiple comments.

Models

  1. User Model

    Fields:

    name (String, required)

    email (String, required, unique)

    createdAt (Date)

    updatedAt (Date)

    Relationships:

    Users have multiple posts.

  2. Post Model

    Fields:

    title (String, required)

    content (String, required)

    user (ObjectId, required, reference to User)

    createdAt (Date)

    updatedAt (Date)

    Relationships:

    Posts belong to a user.

    Posts have multiple comments.

  3. Comment Model

    Fields:

    text (String, required)

    post (ObjectId, required, reference to Post)

    createdAt (Date)

    updatedAt (Date)

    Relationships:

    Comments belong to a post.